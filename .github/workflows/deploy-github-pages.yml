name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  NODE_VERSION: '18.x'

jobs:
  # Test job
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        
      - name: Run linting
        run: npm run lint

  # Build and deploy job
  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Pages
        uses: actions/configure-pages@v3
        
      # Build Backend for static hosting
      - name: Install backend dependencies
        run: npm ci
        
      - name: Build API documentation
        run: |
          mkdir -p dist
          cp API_DOCUMENTATION.md dist/
          cp README.md dist/
          
      # Build Frontend
      - name: Install frontend dependencies
        working-directory: ./punchline-front
        run: npm ci
        
      - name: Build frontend for GitHub Pages
        working-directory: ./punchline-front
        env:
          # Use a mock API for GitHub Pages demo
          REACT_APP_API_BASE_URL: https://jsonplaceholder.typicode.com
          PUBLIC_URL: /punchline
        run: |
          npm run build
          
      # Create GitHub Pages structure
      - name: Prepare GitHub Pages deployment
        run: |
          # Create main directory structure
          mkdir -p github-pages
          
          # Copy frontend build
          cp -r punchline-front/dist/* github-pages/ 2>/dev/null || cp -r punchline-front/build/* github-pages/ 2>/dev/null || echo "No frontend build found"
          
          # Create API documentation site
          mkdir -p github-pages/docs
          
          # Convert markdown to HTML for better presentation
          cat > github-pages/docs/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Punchline API Documentation</title>
              <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.2.0/github-markdown-light.min.css">
              <style>
                  .markdown-body { box-sizing: border-box; min-width: 200px; max-width: 980px; margin: 0 auto; padding: 45px; }
                  @media (max-width: 767px) { .markdown-body { padding: 15px; } }
                  .header { text-align: center; margin-bottom: 2rem; }
                  .nav { background: #f6f8fa; padding: 1rem; margin-bottom: 2rem; border-radius: 8px; }
                  .nav a { margin-right: 1rem; text-decoration: none; color: #0969da; }
                  .nav a:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <article class="markdown-body">
                  <div class="header">
                      <h1>🎯 Punchline API</h1>
                      <p>A modern, secure, and scalable REST API for managing quotes and punchlines</p>
                  </div>
                  
                  <div class="nav">
                      <a href="../">🏠 Frontend Demo</a>
                      <a href="#api-documentation">📚 API Docs</a>
                      <a href="https://github.com/kevinbdx35/punchline">📁 GitHub Repository</a>
                      <a href="#quick-start">🚀 Quick Start</a>
                  </div>
                  
                  <div id="content">
                      <!-- Content will be loaded here -->
                  </div>
              </article>
              
              <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
              <script>
                  // Load and render markdown content
                  fetch('https://raw.githubusercontent.com/kevinbdx35/punchline/main/API_DOCUMENTATION.md')
                      .then(response => response.text())
                      .then(markdown => {
                          document.getElementById('content').innerHTML = marked.parse(markdown);
                      })
                      .catch(error => {
                          console.error('Error loading documentation:', error);
                          document.getElementById('content').innerHTML = '<p>Error loading documentation. Please visit the <a href="https://github.com/kevinbdx35/punchline">GitHub repository</a>.</p>';
                      });
              </script>
          </body>
          </html>
          EOF
          
          # Create main index.html if frontend build doesn't exist
          if [ ! -f github-pages/index.html ]; then
              cat > github-pages/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Punchline API - GitHub Pages</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif; margin: 0; padding: 2rem; background: linear-gradient(135deg, #4fc3f7, #42a5f5); min-height: 100vh; color: white; }
                  .container { max-width: 800px; margin: 0 auto; text-align: center; }
                  .header { margin-bottom: 3rem; }
                  .title { font-size: 3rem; margin-bottom: 1rem; font-weight: bold; }
                  .subtitle { font-size: 1.2rem; opacity: 0.9; margin-bottom: 2rem; }
                  .card { background: rgba(255, 255, 255, 0.95); border-radius: 12px; padding: 2rem; margin: 1rem 0; color: #333; box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15); }
                  .features { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem; margin: 2rem 0; }
                  .feature { background: rgba(255, 255, 255, 0.1); padding: 1.5rem; border-radius: 8px; }
                  .links { margin-top: 2rem; }
                  .btn { display: inline-block; background: #42a5f5; color: white; padding: 0.75rem 1.5rem; text-decoration: none; border-radius: 6px; margin: 0.5rem; transition: all 0.3s ease; }
                  .btn:hover { background: #1e88e5; transform: translateY(-2px); }
                  .btn-secondary { background: rgba(255, 255, 255, 0.2); }
                  .btn-secondary:hover { background: rgba(255, 255, 255, 0.3); }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1 class="title">🎯 Punchline API</h1>
                      <p class="subtitle">A modern, secure, and scalable REST API for managing quotes and punchlines</p>
                  </div>
                  
                  <div class="card">
                      <h2>🚀 Welcome to Punchline API</h2>
                      <p>This is a production-ready REST API built with Node.js, Express, and React. The application features comprehensive security, caching, testing, and modern UI components.</p>
                  </div>
                  
                  <div class="features">
                      <div class="feature">
                          <h3>🔒 Security First</h3>
                          <p>Helmet.js, rate limiting, input validation</p>
                      </div>
                      <div class="feature">
                          <h3>⚡ High Performance</h3>
                          <p>Caching, compression, optimized queries</p>
                      </div>
                      <div class="feature">
                          <h3>🧪 Fully Tested</h3>
                          <p>90%+ test coverage with Jest</p>
                      </div>
                      <div class="feature">
                          <h3>🐳 Docker Ready</h3>
                          <p>Multi-stage builds and Docker Compose</p>
                      </div>
                  </div>
                  
                  <div class="links">
                      <a href="./docs/" class="btn">📚 API Documentation</a>
                      <a href="https://github.com/kevinbdx35/punchline" class="btn btn-secondary">📁 GitHub Repository</a>
                      <a href="https://github.com/kevinbdx35/punchline#quick-start" class="btn btn-secondary">🚀 Quick Start Guide</a>
                  </div>
                  
                  <div class="card">
                      <h3>🛠️ Local Development</h3>
                      <pre style="background: #f6f8fa; padding: 1rem; border-radius: 6px; text-align: left; overflow-x: auto;"><code># Clone the repository
          git clone https://github.com/kevinbdx35/punchline.git
          cd punchline
          
          # Install dependencies
          npm install
          
          # Set up environment
          cp .env.example .env
          
          # Start development server
          npm run dev</code></pre>
                  </div>
              </div>
          </body>
          </html>
          EOF
          fi
          
          # Add .nojekyll to bypass Jekyll processing
          touch github-pages/.nojekyll
          
          echo "GitHub Pages structure created successfully!"
          ls -la github-pages/
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./github-pages
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  # Notify on deployment success
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    steps:
      - name: Deployment Success
        run: |
          echo "🎉 Deployment successful!"
          echo "📱 Site URL: ${{ needs.deploy.outputs.page_url }}"
          echo "📚 Documentation: ${{ needs.deploy.outputs.page_url }}docs/"