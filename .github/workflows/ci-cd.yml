name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  
# Don't run this workflow when GitHub Pages workflow is running
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18.x'
  
jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run tests
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Run security audit
      run: npm audit --audit-level=high
      
    - name: Run dependency check
      run: npx audit-ci --high
      
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t punchline-api:${{ github.sha }} .
        docker build -t punchline-frontend:${{ github.sha }} ./punchline-front
        
    - name: Test Docker containers
      run: |
        docker-compose -f docker-compose.test.yml up --abort-on-container-exit
        
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
        
    - name: Build and push images
      run: |
        docker build -t ${{ secrets.REGISTRY_URL }}/punchline-api:staging .
        docker build -t ${{ secrets.REGISTRY_URL }}/punchline-frontend:staging ./punchline-front
        docker push ${{ secrets.REGISTRY_URL }}/punchline-api:staging
        docker push ${{ secrets.REGISTRY_URL }}/punchline-frontend:staging
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment script here
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
        
    - name: Build and push images
      run: |
        docker build -t ${{ secrets.REGISTRY_URL }}/punchline-api:latest .
        docker build -t ${{ secrets.REGISTRY_URL }}/punchline-api:${{ github.sha }} .
        docker build -t ${{ secrets.REGISTRY_URL }}/punchline-frontend:latest ./punchline-front
        docker build -t ${{ secrets.REGISTRY_URL }}/punchline-frontend:${{ github.sha }} ./punchline-front
        docker push ${{ secrets.REGISTRY_URL }}/punchline-api:latest
        docker push ${{ secrets.REGISTRY_URL }}/punchline-api:${{ github.sha }}
        docker push ${{ secrets.REGISTRY_URL }}/punchline-frontend:latest
        docker push ${{ secrets.REGISTRY_URL }}/punchline-frontend:${{ github.sha }}
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your deployment script here
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Changes in this Release
          - Auto-generated release from commit ${{ github.sha }}
          
          ## Docker Images
          - API: `${{ secrets.REGISTRY_URL }}/punchline-api:${{ github.sha }}`
          - Frontend: `${{ secrets.REGISTRY_URL }}/punchline-frontend:${{ github.sha }}`
        draft: false
        prerelease: false