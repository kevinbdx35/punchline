name: Deploy Static Site to GitHub Pages

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages-static"
  cancel-in-progress: false

jobs:
  deploy:
    name: Deploy Static Site
    runs-on: ubuntu-latest
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      # Create a complete static application without npm build
      - name: Create Static Application
        run: |
          # Create main directory structure
          mkdir -p github-pages
          
          # Create a complete React application manually (avoiding npm build issues)
          cat > github-pages/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Punchline API</title>
              
              <!-- React CDN -->
              <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
              <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
              <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
              
              <!-- Styles -->
              <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                      background: linear-gradient(135deg, #4fc3f7, #42a5f5); 
                      min-height: 100vh; 
                      color: #333; 
                  }
                  .app { min-height: 100vh; display: flex; flex-direction: column; }
                  .header { 
                      background: rgba(255, 255, 255, 0.95); 
                      backdrop-filter: blur(10px); 
                      padding: 1rem 2rem; 
                      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); 
                      position: sticky; 
                      top: 0; 
                      z-index: 100; 
                  }
                  .header-content { text-align: center; margin-bottom: 1rem; }
                  .app-title { 
                      font-size: 3rem; 
                      color: #4fc3f7; 
                      margin-bottom: 0.5rem; 
                      font-weight: bold; 
                  }
                  .app-subtitle { font-size: 1.2rem; color: #666; }
                  .demo-badge { 
                      background: #66bb6a; 
                      color: white; 
                      padding: 0.25rem 0.5rem; 
                      border-radius: 12px; 
                      font-size: 0.8rem; 
                      font-weight: bold; 
                      margin-left: 0.5rem; 
                  }
                  .navigation { 
                      display: flex; 
                      justify-content: center; 
                      gap: 1rem; 
                      flex-wrap: wrap; 
                  }
                  .nav-btn { 
                      background: transparent; 
                      border: 2px solid #4fc3f7; 
                      color: #4fc3f7; 
                      padding: 0.5rem 1.5rem; 
                      border-radius: 12px; 
                      font-size: 1rem; 
                      cursor: pointer; 
                      transition: all 0.3s ease; 
                  }
                  .nav-btn:hover, .nav-btn.active { 
                      background: #4fc3f7; 
                      color: white; 
                      transform: translateY(-2px); 
                  }
                  .main-content { 
                      flex: 1; 
                      padding: 2rem; 
                      max-width: 1200px; 
                      margin: 0 auto; 
                      width: 100%; 
                  }
                  .quote-card { 
                      background: white; 
                      border-radius: 12px; 
                      padding: 2rem; 
                      margin: 1rem auto; 
                      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); 
                      transition: all 0.3s ease; 
                      max-width: 600px; 
                  }
                  .quote-card:hover { 
                      transform: translateY(-4px); 
                      box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15); 
                  }
                  .quote-text { 
                      font-size: 1.5rem; 
                      font-style: italic; 
                      margin-bottom: 1rem; 
                      line-height: 1.5; 
                  }
                  .quote-author { 
                      font-size: 1.1rem; 
                      color: #666; 
                      text-align: right; 
                  }
                  .random-btn { 
                      background: linear-gradient(45deg, #42a5f5, #66bb6a); 
                      color: white; 
                      border: none; 
                      padding: 1rem 2rem; 
                      font-size: 1.2rem; 
                      border-radius: 12px; 
                      cursor: pointer; 
                      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); 
                      transition: all 0.3s ease; 
                      display: block; 
                      margin: 2rem auto; 
                  }
                  .random-btn:hover { 
                      background: linear-gradient(45deg, #1e88e5, #4caf50); 
                      transform: translateY(-2px); 
                      box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15); 
                  }
                  .quotes-grid { 
                      display: grid; 
                      grid-template-columns: repeat(auto-fill, minmax(400px, 1fr)); 
                      gap: 2rem; 
                      margin: 2rem 0; 
                  }
                  .search-bar { 
                      display: flex; 
                      max-width: 500px; 
                      margin: 2rem auto; 
                      border-radius: 12px; 
                      overflow: hidden; 
                      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); 
                  }
                  .search-input { 
                      flex: 1; 
                      padding: 1rem; 
                      border: none; 
                      font-size: 1rem; 
                  }
                  .search-button { 
                      background: #4fc3f7; 
                      color: white; 
                      border: none; 
                      padding: 1rem; 
                      cursor: pointer; 
                  }
                  .feature-section { text-align: center; margin: 2rem 0; }
                  .features-grid { 
                      display: grid; 
                      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); 
                      gap: 1rem; 
                      margin: 2rem 0; 
                  }
                  .feature-card { 
                      background: rgba(255, 255, 255, 0.9); 
                      padding: 1.5rem; 
                      border-radius: 12px; 
                      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); 
                  }
                  .empty-state { 
                      text-align: center; 
                      color: #666; 
                      font-size: 1.2rem; 
                      padding: 3rem; 
                      background: rgba(255, 255, 255, 0.8); 
                      border-radius: 12px; 
                      margin: 2rem auto; 
                      max-width: 500px; 
                  }
                  @media (max-width: 768px) {
                      .app-title { font-size: 2rem; }
                      .quotes-grid { grid-template-columns: 1fr; }
                      .main-content { padding: 1rem; }
                  }
              </style>
          </head>
          <body>
              <div id="root"></div>
              
              <script type="text/babel">
                  // Mock quotes data
                  const mockQuotes = [
                      { id: 1, quote: "The only way to do great work is to love what you do.", author: "Steve Jobs", lang: "en" },
                      { id: 2, quote: "Innovation distinguishes between a leader and a follower.", author: "Steve Jobs", lang: "en" },
                      { id: 3, quote: "Life is what happens to you while you're busy making other plans.", author: "John Lennon", lang: "en" },
                      { id: 4, quote: "La vie est un mystère qu'il faut vivre, et non un problème à résoudre.", author: "Gandhi", lang: "fr" },
                      { id: 5, quote: "The future belongs to those who believe in the beauty of their dreams.", author: "Eleanor Roosevelt", lang: "en" },
                      { id: 6, quote: "Success is not final, failure is not fatal: it is the courage to continue that counts.", author: "Winston Churchill", lang: "en" },
                      { id: 7, quote: "It is during our darkest moments that we must focus to see the light.", author: "Aristotle", lang: "en" },
                      { id: 8, quote: "The way to get started is to quit talking and begin doing.", author: "Walt Disney", lang: "en" }
                  ];
              
                  const { useState, useEffect } = React;
              
                  function App() {
                      const [activeTab, setActiveTab] = useState('random');
                      const [currentQuote, setCurrentQuote] = useState(null);
                      const [searchTerm, setSearchTerm] = useState('');
                      const [favorites, setFavorites] = useState([]);
                      const [filteredQuotes, setFilteredQuotes] = useState(mockQuotes);
              
                      useEffect(() => {
                          // Load favorites from localStorage
                          const savedFavorites = localStorage.getItem('punchline-favorites');
                          if (savedFavorites) {
                              setFavorites(JSON.parse(savedFavorites));
                          }
                          handleRandomQuote();
                      }, []);
              
                      useEffect(() => {
                          // Filter quotes based on search
                          if (searchTerm) {
                              const filtered = mockQuotes.filter(quote => 
                                  quote.quote.toLowerCase().includes(searchTerm.toLowerCase()) ||
                                  quote.author.toLowerCase().includes(searchTerm.toLowerCase())
                              );
                              setFilteredQuotes(filtered);
                          } else {
                              setFilteredQuotes(mockQuotes);
                          }
                      }, [searchTerm]);
              
                      const handleRandomQuote = () => {
                          const randomIndex = Math.floor(Math.random() * mockQuotes.length);
                          setCurrentQuote(mockQuotes[randomIndex]);
                      };
              
                      const handleFavorite = (quote) => {
                          const isAlreadyFavorite = favorites.some(fav => fav.id === quote.id);
                          let newFavorites;
                          
                          if (isAlreadyFavorite) {
                              newFavorites = favorites.filter(fav => fav.id !== quote.id);
                          } else {
                              newFavorites = [...favorites, quote];
                          }
                          
                          setFavorites(newFavorites);
                          localStorage.setItem('punchline-favorites', JSON.stringify(newFavorites));
                      };
              
                      const isFavorite = (quote) => {
                          return favorites.some(fav => fav.id === quote.id);
                      };
              
                      const QuoteCard = ({ quote, showActions = false }) => (
                          <div className="quote-card">
                              <div className="quote-text">"{quote.quote}"</div>
                              <div className="quote-author">— {quote.author}</div>
                              {showActions && (
                                  <button 
                                      onClick={() => handleFavorite(quote)}
                                      style={{
                                          background: 'none',
                                          border: 'none',
                                          fontSize: '1.5rem',
                                          cursor: 'pointer',
                                          marginTop: '1rem'
                                      }}
                                  >
                                      {isFavorite(quote) ? '❤️' : '🤍'}
                                  </button>
                              )}
                          </div>
                      );
              
                      return (
                          <div className="app">
                              <header className="header">
                                  <div className="header-content">
                                      <h1 className="app-title">Punchline API</h1>
                                      <p className="app-subtitle">
                                          Discover inspiring quotes and punchlines
                                          <span className="demo-badge">Demo Mode</span>
                                      </p>
                                  </div>
                                  
                                  <nav className="navigation">
                                      <button 
                                          className={`nav-btn ${activeTab === 'random' ? 'active' : ''}`}
                                          onClick={() => setActiveTab('random')}
                                      >
                                          Random
                                      </button>
                                      <button 
                                          className={`nav-btn ${activeTab === 'browse' ? 'active' : ''}`}
                                          onClick={() => setActiveTab('browse')}
                                      >
                                          Browse
                                      </button>
                                      <button 
                                          className={`nav-btn ${activeTab === 'favorites' ? 'active' : ''}`}
                                          onClick={() => setActiveTab('favorites')}
                                      >
                                          Favorites ({favorites.length})
                                      </button>
                                  </nav>
                              </header>
              
                              <main className="main-content">
                                  {activeTab === 'random' && (
                                      <div className="feature-section">
                                          <button className="random-btn" onClick={handleRandomQuote}>
                                              Get Random Quote
                                          </button>
                                          {currentQuote && (
                                              <QuoteCard quote={currentQuote} showActions={true} />
                                          )}
                                      </div>
                                  )}
              
                                  {activeTab === 'browse' && (
                                      <div>
                                          <div className="search-bar">
                                              <input
                                                  type="text"
                                                  value={searchTerm}
                                                  onChange={(e) => setSearchTerm(e.target.value)}
                                                  placeholder="Search quotes or authors..."
                                                  className="search-input"
                                              />
                                              <button className="search-button">🔍</button>
                                          </div>
                                          
                                          <div className="quotes-grid">
                                              {filteredQuotes.map(quote => (
                                                  <QuoteCard 
                                                      key={quote.id} 
                                                      quote={quote}
                                                      showActions={true}
                                                  />
                                              ))}
                                          </div>
                                          
                                          {filteredQuotes.length === 0 && (
                                              <div className="empty-state">
                                                  No quotes found for "{searchTerm}"
                                              </div>
                                          )}
                                      </div>
                                  )}
              
                                  {activeTab === 'favorites' && (
                                      <div>
                                          {favorites.length === 0 ? (
                                              <div className="empty-state">
                                                  <p>No favorite quotes yet!</p>
                                                  <p>Click the ❤️ button on any quote to add it to your favorites.</p>
                                              </div>
                                          ) : (
                                              <div className="quotes-grid">
                                                  {favorites.map(quote => (
                                                      <QuoteCard 
                                                          key={quote.id} 
                                                          quote={quote}
                                                          showActions={true}
                                                      />
                                                  ))}
                                              </div>
                                          )}
                                      </div>
                                  )}
                              </main>
                          </div>
                      );
                  }
              
                  ReactDOM.render(<App />, document.getElementById('root'));
              </script>
          </body>
          </html>
          EOF
          
          # Create API documentation site
          mkdir -p github-pages/docs
          
          cat > github-pages/docs/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Punchline API Documentation</title>
              <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.2.0/github-markdown-light.min.css">
              <style>
                  .markdown-body { box-sizing: border-box; min-width: 200px; max-width: 980px; margin: 0 auto; padding: 45px; }
                  @media (max-width: 767px) { .markdown-body { padding: 15px; } }
                  .header { text-align: center; margin-bottom: 2rem; }
                  .nav { background: #f6f8fa; padding: 1rem; margin-bottom: 2rem; border-radius: 8px; }
                  .nav a { margin-right: 1rem; text-decoration: none; color: #0969da; }
                  .nav a:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <article class="markdown-body">
                  <div class="header">
                      <h1>🎯 Punchline API</h1>
                      <p>A modern, secure, and scalable REST API for managing quotes and punchlines</p>
                  </div>
                  
                  <div class="nav">
                      <a href="../">🏠 Frontend Demo</a>
                      <a href="https://github.com/kevinbdx35/punchline">📁 GitHub Repository</a>
                      <a href="#quick-start">🚀 Quick Start</a>
                  </div>
                  
                  <div id="content">
                      <p>Loading documentation...</p>
                  </div>
              </article>
              
              <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
              <script>
                  fetch('https://raw.githubusercontent.com/kevinbdx35/punchline/main/API_DOCUMENTATION.md')
                      .then(response => response.text())
                      .then(markdown => {
                          document.getElementById('content').innerHTML = marked.parse(markdown);
                      })
                      .catch(error => {
                          console.error('Error loading documentation:', error);
                          document.getElementById('content').innerHTML = = '<h2>📚 API Documentation</h2><p>Visit the <a href="https://github.com/kevinbdx35/punchline">GitHub repository</a> for complete documentation.</p>';
                      });
              </script>
          </body>
          </html>
          EOF
          
          # Add .nojekyll to bypass Jekyll processing
          touch github-pages/.nojekyll
          
          echo "✅ Static application created successfully!"
          echo "📁 Files in github-pages:"
          ls -la github-pages/
          
      - name: Deploy to gh-pages branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./github-pages
          publish_branch: gh-pages
          force_orphan: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'Deploy static React app to GitHub Pages from ${{ github.sha }}'

  # Notify on deployment success
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    steps:
      - name: Deployment Success
        run: |
          echo "🎉 Static deployment successful!"
          echo "📱 Site available at: https://kevinbdx35.github.io/punchline/"
          echo "📚 Documentation: https://kevinbdx35.github.io/punchline/docs/"
          echo "🔄 It may take a few minutes for the site to be available"